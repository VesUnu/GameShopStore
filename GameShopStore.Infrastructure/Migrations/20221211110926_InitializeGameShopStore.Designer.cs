// <auto-generated />
using System;
using GameShopStore.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GameShop.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221211110926_InitializeGameShopStore")]
    partial class InitializeGameShopStore : InitializeGameShopStoreBase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GameShopStore.Core.Models.Address", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("City")
                    .HasColumnType("nvarchar(40)")
                    .HasMaxLength(40);

                b.Property<string>("Country")
                    .HasColumnType("nvarchar(40)")
                    .HasMaxLength(40);

                b.Property<string>("Email")
                    .IsRequired()
                    .HasColumnType("nvarchar(320)")
                    .HasMaxLength(320);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(30)")
                    .HasMaxLength(30);

                b.Property<string>("Phone")
                    .IsRequired()
                    .HasColumnType("nvarchar(15)")
                    .HasMaxLength(15);

                b.Property<string>("PostCode")
                    .IsRequired()
                    .HasColumnType("nvarchar(12)")
                    .HasMaxLength(12);

                b.Property<string>("Street")
                    .IsRequired()
                    .HasColumnType("nvarchar(80)")
                    .HasMaxLength(80);

                b.Property<string>("SurName")
                    .IsRequired()
                    .HasColumnType("nvarchar(30)")
                    .HasMaxLength(30);

                b.Property<int>("UserId")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("UserId");

                b.ToTable("Addresses");
            });

            modelBuilder.Entity("GameShopStore.Core.Models.Category", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("Description")
                    .IsRequired()
                    .HasColumnType("nvarchar(500)")
                    .HasMaxLength(500);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(40)")
                    .HasMaxLength(40);

                b.HasKey("Id");

                b.ToTable("Categories");

                b.HasData(
                    new
                    {
                        Id = 1,
                        Description = "PC Description",
                        Name = "PC"
                    },
                    new
                    {
                        Id = 2,
                        Description = "PS4 Description",
                        Name = "PS4"
                    },
                    new
                    {
                        Id = 3,
                        Description = "XBOX One Description",
                        Name = "XONE"
                    });
            });

            modelBuilder.Entity("GameShopStore.Core.Models.CategorySubCategory", b =>
            {
                b.Property<int>("CategoryId")
                    .HasColumnType("int");

                b.Property<int>("SubCategoryId")
                    .HasColumnType("int");

                b.HasKey("CategoryId", "SubCategoryId");

                b.HasIndex("SubCategoryId");

                b.ToTable("CategoriesSubCategories");

                b.HasData(
                    new
                    {
                        CategoryId = 1,
                        SubCategoryId = 1
                    },
                    new
                    {
                        CategoryId = 1,
                        SubCategoryId = 2
                    },
                    new
                    {
                        CategoryId = 1,
                        SubCategoryId = 3
                    },
                    new
                    {
                        CategoryId = 1,
                        SubCategoryId = 4
                    },
                    new
                    {
                        CategoryId = 1,
                        SubCategoryId = 5
                    },
                    new
                    {
                        CategoryId = 1,
                        SubCategoryId = 6
                    },
                    new
                    {
                        CategoryId = 1,
                        SubCategoryId = 7
                    },
                    new
                    {
                        CategoryId = 1,
                        SubCategoryId = 8
                    },
                    new
                    {
                        CategoryId = 2,
                        SubCategoryId = 1
                    },
                    new
                    {
                        CategoryId = 2,
                        SubCategoryId = 2
                    },
                    new
                    {
                        CategoryId = 2,
                        SubCategoryId = 3
                    },
                    new
                    {
                        CategoryId = 2,
                        SubCategoryId = 6
                    },
                    new
                    {
                        CategoryId = 2,
                        SubCategoryId = 7
                    },
                    new
                    {
                        CategoryId = 2,
                        SubCategoryId = 8
                    },
                    new
                    {
                        CategoryId = 3,
                        SubCategoryId = 1
                    },
                    new
                    {
                        CategoryId = 3,
                        SubCategoryId = 2
                    },
                    new
                    {
                        CategoryId = 3,
                        SubCategoryId = 3
                    },
                    new
                    {
                        CategoryId = 3,
                        SubCategoryId = 6
                    },
                    new
                    {
                        CategoryId = 3,
                        SubCategoryId = 7
                    });
            });

            modelBuilder.Entity("GameShopStore.Core.Models.DeliveryOpt", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("Currency")
                    .IsRequired()
                    .HasColumnType("nvarchar(5)")
                    .HasMaxLength(5);

                b.Property<string>("Description")
                    .HasColumnType("nvarchar(400)")
                    .HasMaxLength(400);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(30)")
                    .HasMaxLength(30);

                b.Property<decimal>("Price")
                    .HasColumnType("decimal(9,2)");

                b.HasKey("Id");

                b.ToTable("DeliveryOpts");

                b.HasData(
                    new
                    {
                        Id = 1,
                        Currency = "$",
                        Description = "Today, DHL is the world's leading logistics company. Our 380,000 people in over 200 countries and territories work very day to help you cross borders, reach new markets and grow your business. Or simply send a letter to your loved ones.",
                        Name = "DHL",
                        Price = 4.55m
                    },
                    new
                    {
                        Id = 2,
                        Currency = "$",
                        Description = "Speedy is among the largest companies in the Bulgarian market of courier services with a market share of over 33%. The company was founded in 1998 and has grown since to a corporate structure with more than 3000 employees and partners and more than 1700 delivery vehicles.",
                        Name = "SPEEDY",
                        Price = 5.10m
                    },
                    new
                    {
                        Id = 3,
                        Currency = "$",
                        Description = "Connecting people with goods, services and ideas creates opportunities and improves lives. At FedEx, we believe that a connected world is a better world, and that belief guides everything we do.",
                        Name = "FedEx",
                        Price = 5.50m
                    },
                    new
                    {
                        Id = 4,
                        Currency = "$",
                        Description = "For more than 20 years, we have been growing and developing so that we are useful to you. Since its founding in 1993, Econt has established as an expert in logistics in Bulgaria. Drive by our desire to offer added value, we are constantly providing you and your business with new and better solutions in the realm of logistics and payment services.",
                        Name = "Econt",
                        Price = 4.80m
                    });
            });

            modelBuilder.Entity("GameShopStore.Core.Models.Language", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(25)")
                    .HasMaxLength(25);

                b.HasKey("Id");

                b.ToTable("Languages");

                b.HasData(
                    new
                    {
                        Id = 1,
                        Name = "Polish"
                    },
                    new
                    {
                        Id = 2,
                        Name = "English"
                    },
                    new
                    {
                        Id = 3,
                        Name = "German"
                    },
                    new
                    {
                        Id = 4,
                        Name = "Russian"
                    },
                    new
                    {
                        Id = 5,
                        Name = "French"
                    },
                    new
                    {
                        Id = 6,
                        Name = "Italian"
                    },
                    new
                    {
                        Id = 7,
                        Name = "Spanish"
                    });
            });

            modelBuilder.Entity("GameShopStore.Core.Models.Order", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("City")
                    .HasColumnType("nvarchar(40)")
                    .HasMaxLength(40);

                b.Property<string>("Country")
                    .HasColumnType("nvarchar(40)")
                    .HasMaxLength(40);

                b.Property<string>("DeliveryType")
                    .IsRequired()
                    .HasColumnType("nvarchar(30)")
                    .HasMaxLength(30);

                b.Property<string>("Email")
                    .IsRequired()
                    .HasColumnType("nvarchar(320)")
                    .HasMaxLength(320);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(30)")
                    .HasMaxLength(30);

                b.Property<decimal>("OrderPrice")
                    .HasColumnType("decimal(9,2)");

                b.Property<Guid>("OrderRef")
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("Phone")
                    .HasColumnType("nvarchar(15)")
                    .HasMaxLength(15);

                b.Property<string>("PostCode")
                    .IsRequired()
                    .HasColumnType("nvarchar(12)")
                    .HasMaxLength(12);

                b.Property<string>("Street")
                    .IsRequired()
                    .HasColumnType("nvarchar(80)")
                    .HasMaxLength(80);

                b.Property<string>("StripeRef")
                    .IsRequired()
                    .HasColumnType("nvarchar(35)")
                    .HasMaxLength(35);

                b.Property<string>("SurName")
                    .IsRequired()
                    .HasColumnType("nvarchar(30)")
                    .HasMaxLength(30);

                b.HasKey("Id");

                b.ToTable("Orders");
            });

            modelBuilder.Entity("GameShopStore.Core.Models.OrderStock", b =>
            {
                b.Property<int>("StockId")
                    .HasColumnType("int");

                b.Property<int>("OrderId")
                    .HasColumnType("int");

                b.Property<decimal>("Price")
                    .HasColumnType("decimal(9,2)");

                b.Property<int>("Quantity")
                    .HasColumnType("int");

                b.HasKey("StockId", "OrderId");

                b.HasIndex("OrderId");

                b.ToTable("OrderStocks");
            });

            modelBuilder.Entity("GameShopStore.Core.Models.Picture", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<DateTime>("DateAdded")
                    .HasColumnType("datetime2");

                b.Property<int>("ProductId")
                    .HasColumnType("int");

                b.Property<string>("PublicId")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Url")
                    .IsRequired()
                    .HasColumnType("nvarchar(130)")
                    .HasMaxLength(130);

                b.Property<bool>("isMain")
                    .HasColumnType("bit");

                b.HasKey("Id");

                b.HasIndex("ProductId");

                b.ToTable("Pictures");

                b.HasData(
                    new
                    {
                        Id = 1,
                        DateAdded = new DateTime(2022, 4, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                        ProductId = 1,
                        Url = "https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_1280.png",
                        isMain = true
                    },
                    new
                    {
                        Id = 2,
                        DateAdded = new DateTime(2022, 4, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                        ProductId = 2,
                        Url = "https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_1280.png",
                        isMain = true
                    },
                    new
                    {
                        Id = 3,
                        DateAdded = new DateTime(2022, 4, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                        ProductId = 3,
                        Url = "https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_1280.png",
                        isMain = true
                    },
                    new
                    {
                        Id = 4,
                        DateAdded = new DateTime(2022, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                        ProductId = 4,
                        Url = "https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_1280.png",
                        isMain = true
                    },
                    new
                    {
                        Id = 5,
                        DateAdded = new DateTime(2022, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                        ProductId = 5,
                        Url = "https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_1280.png",
                        isMain = true
                    },
                    new
                    {
                        Id = 6,
                        DateAdded = new DateTime(2022, 8, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                        ProductId = 6,
                        Url = "https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_1280.png",
                        isMain = true
                    },
                    new
                    {
                        Id = 7,
                        DateAdded = new DateTime(2022, 9, 05, 0, 0, 0, 0, DateTimeKind.Unspecified),
                        ProductId = 7,
                        Url = "https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_1280.png",
                        isMain = true
                    },
                    new
                    {
                        Id = 8,
                        DateAdded = new DateTime(2022, 9, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                        ProductId = 7,
                        Url = "https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_1280.png",
                        isMain = true
                    },
                    new
                    {
                        Id = 9,
                        DateAdded = new DateTime(2022, 10, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                        ProductId = 7,
                        Url = "https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_1280.png",
                        isMain = true
                    });
            });

            modelBuilder.Entity("GameShopStore.Core.Models.Product", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<int?>("CategoryId")
                    .HasColumnType("int");

                b.Property<string>("Description")
                    .IsRequired()
                    .HasColumnType("nvarchar(2000)")
                    .HasMaxLength(2000);

                b.Property<bool>("IsDigitalMedia")
                    .HasColumnType("bit");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(50)")
                    .HasMaxLength(50);

                b.Property<byte>("Pegi")
                    .HasColumnType("tinyint");

                b.Property<decimal>("Price")
                    .HasColumnType("decimal(9,2)");

                b.Property<DateTime>("ReleaseDate")
                    .HasColumnType("datetime2");

                b.HasKey("Id");

                b.HasIndex("CategoryId");

                b.ToTable("Products");

                b.HasData(
                    new
                    {
                        Id = 1,
                        Description = @"Cyberpunk 2077 is an open-world, action-adventure RPG set in the dark future of Night City - a dangerous megalopolis obsessed with power, glamor, and ceaseless body modification.
",
                        IsDigitalMedia = true,
                        Name = "Cyberpunk 2077",
                        Pegi = (byte)18,
                        Price = 59.99m,
                        ReleaseDate = new DateTime(2020, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                    },
                    new
                    {
                        Id = 2,
                        Description = @"Lead the Industrial Revolution! Welcome to the dawn of the Industrial Age. The path you choose will define your world. Are you an innovator or an exploiter? A conqueror or a liberator? How the world remembers your name is up to you.
",
                        IsDigitalMedia = false,
                        Name = "Anno 1800",
                        Pegi = (byte)12,
                        Price = 59.99m,
                        ReleaseDate = new DateTime(2019, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                    },
                    new
                    {
                        Id = 3,
                        Description = @"Experience survival horror like never before in the 8th major installment in the Resident Evil franchise - Resident Evil Village. With detailed graphics, intense first-person action and masterful storytelling, the terror has never felt more realistic.
",
                        IsDigitalMedia = true,
                        Name = "Resident Evil Village",
                        Pegi = (byte)18,
                        Price = 39.99m,
                        ReleaseDate = new DateTime(2021, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified)
                    },
                    new
                    {
                        Id = 4,
                        Description = @"Experience the excitement of the biggest tournament in football with EA SPORTS FIFA 23 and the men's FIFA World Cup update, available on November 9 at no additiona cost!
",
                        IsDigitalMedia = true,
                        Name = "FIFA 23",
                        Pegi = (byte)3,
                        Price = 69.99m,
                        ReleaseDate = new DateTime(2022, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified)
                    },
                    new
                    {
                        Id = 5,
                        Description = @"Winner of over 175 Game of the Year Awards and recipient of over 250 perfect scores, RDR2 is the epic tale of outlaw Arthur Morgan and the infamous Van der Linde gang, on the run across America at the dawn of the modern age. Also includes access to the shared living world of Red Dead Online.
",
                        IsDigitalMedia = true,
                        Name = "Red Dead Redemption 2",
                        Pegi = (byte)18,
                        Price = 55.15m,
                        ReleaseDate = new DateTime(2019, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                    },
                    new
                    {
                        Id = 6,
                        Description = @"Dynamic seasons change everything at the world’s greatest automotive festival. Go it alone or team up with others to explore beautiful and historic Britain in a shared open world.
",
                        IsDigitalMedia = false,
                        Name = "Forza Horizon 4",
                        Pegi = (byte)12,
                        Price = 31.99m,
                        ReleaseDate = new DateTime(2017, 8, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                    },
                    new
                    {
                        Id = 7,
                        Description = @"Cloud Strife, an ex-SOLDIER operative, descends on the mako-powered city of Midgar. The world of the timeless classic FINAL FANTASY VII is reborn, using cutting-edge graphics technology, a new battle system and an additional adventure featuring Yuffie Kisaragi.
",
                        IsDigitalMedia = false,
                        Name = "Final Fantasy VII Remake Integrade",
                        Pegi = (byte)16,
                        Price = 40.59m,
                        ReleaseDate = new DateTime(2022, 6, 17, 0, 0, 0, 0, DateTimeKind.Unspecified)
                    },
                    new
                    {
                        Id = 8,
                        Description = @"Infiltrate terrorists' positions, acquire critical intelligence by any means necessary, execute with extreme prejudice, and exit without a trace! You are Sam Fisher, a highly trained secret operative of the NSA's secret arm: Third Echelon.
",
                        IsDigitalMedia = false,
                        Name = "Tom Clancy's Splinter Cell",
                        Pegi = (byte)12,
                        Price = 40.59m,
                        ReleaseDate = new DateTime(2003, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                    },
                    new
                    {
                        Id = 7,
                        Description = @"Grand Theft Auto V for PC offers players the option to explore the award-winning world of Los Santos and Blaine County in resolutions of up to 4k and beyond, as well as the chance to experience the game running at 60 frames per second.
",
                        IsDigitalMedia = false,
                        Name = "Grand Theft Auto V",
                        Pegi = (byte)18,
                        Price = 40.59m,
                        ReleaseDate = new DateTime(2015, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                    });
            });

            modelBuilder.Entity("GameShopStore.Core.Models.ProductLanguage", b =>
            {
                b.Property<int>("ProductId")
                    .HasColumnType("int");

                b.Property<int>("LanguageId")
                    .HasColumnType("int");

                b.HasKey("ProductId", "LanguageId");

                b.HasIndex("LanguageId");

                b.ToTable("ProductsLanaguages");

                b.HasData(
                    new
                    {
                        ProductId = 1,
                        LanguageId = 1
                    },
                    new
                    {
                        ProductId = 1,
                        LanguageId = 2
                    },
                    new
                    {
                        ProductId = 1,
                        LanguageId = 5
                    },
                    new
                    {
                        ProductId = 2,
                        LanguageId = 2
                    },
                    new
                    {
                        ProductId = 2,
                        LanguageId = 4
                    },
                    new
                    {
                        ProductId = 3,
                        LanguageId = 2
                    },
                    new
                    {
                        ProductId = 4,
                        LanguageId = 1
                    },
                    new
                    {
                        ProductId = 4,
                        LanguageId = 2
                    },
                    new
                    {
                        ProductId = 4,
                        LanguageId = 3
                    },
                    new
                    {
                        ProductId = 4,
                        LanguageId = 4
                    },
                    new
                    {
                        ProductId = 4,
                        LanguageId = 5
                    },
                    new
                    {
                        ProductId = 4,
                        LanguageId = 6
                    },
                    new
                    {
                        ProductId = 5,
                        LanguageId = 2
                    },
                    new
                    {
                        ProductId = 5,
                        LanguageId = 3
                    },
                    new
                    {
                        ProductId = 6,
                        LanguageId = 1
                    },
                    new
                    {
                        ProductId = 6,
                        LanguageId = 3
                    },
                    new
                    {
                        ProductId = 7,
                        LanguageId = 4
                    },
                    new
                    {
                        ProductId = 7,
                        LanguageId = 6
                    },
                    new
                    {
                        ProductId = 8,
                        LanguageId = 2
                    },
                    new
                    {
                        ProductId = 8,
                        LanguageId = 7
                    },
                    new
                    {
                        ProductId = 9,
                        LanguageId = 2
                    },
                    new
                    {
                        ProductId = 9,
                        LanguageId = 3
                    },
                    new
                    {
                        ProductId = 9,
                        LanguageId = 5
                    },
                    new
                    {
                        ProductId = 9,
                        LanguageId = 7
                    });
            });

            modelBuilder.Entity("GameShopStore.Core.Models.ProductSubCategory", b =>
            {
                b.Property<int>("ProductId")
                    .HasColumnType("int");

                b.Property<int>("SubCategoryId")
                    .HasColumnType("int");

                b.HasKey("ProductId", "SubCategoryId");

                b.HasIndex("SubCategoryId");

                b.ToTable("ProductsSubCategories");

                b.HasData(
                    new
                    {
                        ProductId = 1,
                        SubCategoryId = 7
                    },
                    new
                    {
                        ProductId = 2,
                        SubCategoryId = 8
                    },
                    new
                    {
                        ProductId = 3,
                        SubCategoryId = 3
                    },
                    new
                    {
                        ProductId = 4,
                        SubCategoryId = 8
                    },
                    new
                    {
                        ProductId = 5,
                        SubCategoryId = 4
                    },
                    new
                    {
                        ProductId = 6,
                        SubCategoryId = 6
                    },
                    new
                    {
                        ProductId = 7,
                        SubCategoryId = 7
                    },
                    new
                    {
                        ProductId = 8,
                        SubCategoryId = 1
                    },
                    new
                    {
                        ProductId = 9,
                        SubCategoryId = 4
                    });
            });

            modelBuilder.Entity("GameShopStore.Core.Models.Requirements", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("GraphicsCard")
                    .HasColumnType("nvarchar(100)")
                    .HasMaxLength(100);

                b.Property<int>("HDD")
                    .HasColumnType("int");

                b.Property<bool>("IsNetworkConnectionRequire")
                    .HasColumnType("bit");

                b.Property<string>("OS")
                    .HasColumnType("nvarchar(30)")
                    .HasMaxLength(30);

                b.Property<string>("Processor")
                    .HasColumnType("nvarchar(100)")
                    .HasMaxLength(100);

                b.Property<int>("ProductId")
                    .HasColumnType("int");

                b.Property<byte>("RAM")
                    .HasColumnType("tinyint");

                b.HasKey("Id");

                b.HasIndex("ProductId")
                    .IsUnique();

                b.ToTable("Requirements");

                b.HasData(
                    new
                    {
                        Id = 1,
                        GraphicsCard = "Nvidia GeForce GTX 780 3GB / AMD Radeon RX 470",
                        HDD = 50,
                        IsNetworkConnectionRequire = true,
                        OS = "Windows 7/8/10",
                        Processor = "Intel Core i5-3570K / AMD FX-8310",
                        ProductId = 1,
                        RAM = (byte)6
                    },
                    new
                    {
                        Id = 2,
                        GraphicsCard = "NVIDIA GeForce 670 GTX / AMD Radeon R9 285",
                        HDD = 30,
                        IsNetworkConnectionRequire = true,
                        OS = "Windows 7/8/10",
                        Processor = "Intel Core i5-3470 / AMD FX 6350",
                        ProductId = 2,
                        RAM = (byte)8
                    },
                    new
                    {
                        Id = 3,
                        GraphicsCard = "AMD Radeon RX 560 4GB / Nvidia GeForce GTX 1050 Ti 4GB",
                        HDD = 10,
                        IsNetworkConnectionRequire = true,
                        OS = "Windows 10",
                        Processor = "AMD Ryzen 3 1200 / Intel Core i5-7500",
                        ProductId = 3,
                        RAM = (byte)8
                    },
                    new
                    {
                        Id = 4,
                        GraphicsCard = "AMD Radeon RX 5600 XT / NVIDIA GeForce GTX 1660",
                        HDD = 50,
                        IsNetworkConnectionRequire = true,
                        OS = "Windows 10",
                        Processor = "AMD Ryzen 7 2700X / Intel Core i7 6700",
                        ProductId = 4,
                        RAM = (byte)12
                    },
                    new
                    {
                        Id = 5,
                        GraphicsCard = "Nvidia GeForce GTX 770 2GB / AMD Radeon R9 280",
                        HDD = 50,
                        IsNetworkConnectionRequire = true,
                        OS = "Windows 7/8/10",
                        Processor = "Intel Core i5-2500K / AMD FX-6300",
                        ProductId = 5,
                        RAM = (byte)8
                    },
                    new
                    {
                        Id = 6,
                        GraphicsCard = "None",
                        HDD = 30,
                        IsNetworkConnectionRequire = true,
                        OS = "None",
                        Processor = "None",
                        ProductId = 6,
                        RAM = (byte)0
                    },
                    new
                    {
                        Id = 7,
                        GraphicsCard = "AMD Radeon™ RX 480 / NVIDIA GeForce GTX 780",
                        HDD = 30,
                        IsNetworkConnectionRequire = true,
                        OS = "Windows 10",
                        Processor = "AMD FX-8350 / Intel Core™ i5-3330",
                        ProductId = 7,
                        RAM = (byte)8
                    },
                    new
                    {
                        Id = 8,
                        GraphicsCard = "None",
                        HDD = 30,
                        IsNetworkConnectionRequire = true,
                        OS = "None",
                        Processor = "None",
                        ProductId = 7,
                        RAM = (byte)0
                    },
                    new
                    {
                        Id = 9,
                        GraphicsCard = "NVIDIA GTX 660 2GB / AMD HD 7870 2GB",
                        HDD = 30,
                        IsNetworkConnectionRequire = true,
                        OS = "Windows 7/8/10",
                        Processor = "Intel Core i5 3470 3.2GHz / AMD X8 FX-8350 4GHz",
                        ProductId = 7,
                        RAM = (byte)16
                    });
            });

            modelBuilder.Entity("GameShopStore.Core.Models.Role", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Name")
                    .HasColumnType("nvarchar(256)")
                    .HasMaxLength(256);

                b.Property<string>("NormalizedName")
                    .HasColumnType("nvarchar(256)")
                    .HasMaxLength(256);

                b.HasKey("Id");

                b.HasIndex("NormalizedName")
                    .IsUnique()
                    .HasName("RoleNameIndex")
                    .HasFilter("[NormalizedName] IS NOT NULL");

                b.ToTable("AspNetRoles");
            });

            modelBuilder.Entity("GameShopStore.Core.Models.Stock", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<int>("ProductId")
                    .HasColumnType("int");

                b.Property<int>("Quantity")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("ProductId")
                    .IsUnique();

                b.ToTable("Stocks");

                b.HasData(
                    new
                    {
                        Id = 1,
                        ProductId = 1,
                        Quantity = 145
                    },
                    new
                    {
                        Id = 2,
                        ProductId = 2,
                        Quantity = 70
                    },
                    new
                    {
                        Id = 3,
                        ProductId = 3,
                        Quantity = 80
                    },
                    new
                    {
                        Id = 4,
                        ProductId = 4,
                        Quantity = 160
                    },
                    new
                    {
                        Id = 5,
                        ProductId = 5,
                        Quantity = 105
                    },
                    new
                    {
                        Id = 6,
                        ProductId = 6,
                        Quantity = 45
                    },
                    new
                    {
                        Id = 7,
                        ProductId = 7,
                        Quantity = 120
                    },
                    new
                    {
                        Id = 8,
                        ProductId = 7,
                        Quantity = 60
                    },
                    new
                    {
                        Id = 9,
                        ProductId = 7,
                        Quantity = 140
                    });
            });

            modelBuilder.Entity("GameShopStore.Core.Models.StockOnHold", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<DateTime>("ExpireTime")
                    .HasColumnType("datetime2");

                b.Property<int>("ProductId")
                    .HasColumnType("int");

                b.Property<string>("SessionId")
                    .IsRequired()
                    .HasColumnType("nvarchar(50)")
                    .HasMaxLength(50);

                b.Property<int>("StockId")
                    .HasColumnType("int");

                b.Property<int>("StockQty")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("StockId");

                b.ToTable("StockOnHolds");
            });

            modelBuilder.Entity("GameShopStore.Core.Models.SubCategory", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("Description")
                    .IsRequired()
                    .HasColumnType("nvarchar(500)")
                    .HasMaxLength(500);

                b.Property<string>("Name")
                    .IsRequired()
                    .HasColumnType("nvarchar(40)")
                    .HasMaxLength(40);

                b.HasKey("Id");

                b.ToTable("SubCategories");

                b.HasData(
                    new
                    {
                        Id = 1,
                        Description = "Stealth Description",
                        Name = "Stealth"
                    },
                    new
                    {
                        Id = 2,
                        Description = "FPS Description",
                        Name = "FPS"
                    },
                    new
                    {
                        Id = 3,
                        Description = "Horror Description",
                        Name = "Horror"
                    },
                    new
                    {
                        Id = 4,
                        Description = "Open-world Description",
                        Name = "Open-world"
                    },
                    new
                    {
                        Id = 5,
                        Description = "RTS Description",
                        Name = "RTS"
                    },
                    new
                    {
                        Id = 6,
                        Description = "Racing Description",
                        Name = "Racing"
                    },
                    new
                    {
                        Id = 7,
                        Description = "Adventure Description",
                        Name = "Adventure"
                    },
                    new
                    {
                        Id = 8,
                        Description = "Simulator Description",
                        Name = "Simulator"
                    });
            });

            modelBuilder.Entity("GameShopStore.Core.Models.User", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<int>("AccessFailedCount")
                    .HasColumnType("int");

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime>("Created")
                    .HasColumnType("datetime2");

                b.Property<string>("Email")
                    .HasColumnType("nvarchar(256)")
                    .HasMaxLength(256);

                b.Property<bool>("EmailConfirmed")
                    .HasColumnType("bit");

                b.Property<DateTime>("LastActive")
                    .HasColumnType("datetime2");

                b.Property<bool>("LockoutEnabled")
                    .HasColumnType("bit");

                b.Property<DateTimeOffset?>("LockoutEnd")
                    .HasColumnType("datetimeoffset");

                b.Property<string>("NormalizedEmail")
                    .HasColumnType("nvarchar(256)")
                    .HasMaxLength(256);

                b.Property<string>("NormalizedUserName")
                    .HasColumnType("nvarchar(256)")
                    .HasMaxLength(256);

                b.Property<string>("PasswordHash")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("PhoneNumber")
                    .HasColumnType("nvarchar(max)");

                b.Property<bool>("PhoneNumberConfirmed")
                    .HasColumnType("bit");

                b.Property<string>("SecurityStamp")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("SurName")
                    .HasColumnType("nvarchar(40)")
                    .HasMaxLength(40);

                b.Property<bool>("TwoFactorEnabled")
                    .HasColumnType("bit");

                b.Property<string>("UserName")
                    .HasColumnType("nvarchar(256)")
                    .HasMaxLength(256);

                b.HasKey("Id");

                b.HasIndex("NormalizedEmail")
                    .HasName("EmailIndex");

                b.HasIndex("NormalizedUserName")
                    .IsUnique()
                    .HasName("UserNameIndex")
                    .HasFilter("[NormalizedUserName] IS NOT NULL");

                b.ToTable("AspNetUsers");
            });

            modelBuilder.Entity("GameShopStore.Core.Models.UserRole", b =>
            {
                b.Property<int>("UserId")
                    .HasColumnType("int");

                b.Property<int>("RoleId")
                    .HasColumnType("int");

                b.HasKey("UserId", "RoleId");

                b.HasIndex("RoleId");

                b.ToTable("AspNetUserRoles");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("ClaimType")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("ClaimValue")
                    .HasColumnType("nvarchar(max)");

                b.Property<int>("RoleId")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("RoleId");

                b.ToTable("AspNetRoleClaims");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int")
                    .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                b.Property<string>("ClaimType")
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("ClaimValue")
                    .HasColumnType("nvarchar(max)");

                b.Property<int>("UserId")
                    .HasColumnType("int");

                b.HasKey("Id");

                b.HasIndex("UserId");

                b.ToTable("AspNetUserClaims");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
            {
                b.Property<string>("LoginProvider")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("ProviderKey")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("ProviderDisplayName")
                    .HasColumnType("nvarchar(max)");

                b.Property<int>("UserId")
                    .HasColumnType("int");

                b.HasKey("LoginProvider", "ProviderKey");

                b.HasIndex("UserId");

                b.ToTable("AspNetUserLogins");
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
            {
                b.Property<int>("UserId")
                    .HasColumnType("int");

                b.Property<string>("LoginProvider")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("Name")
                    .HasColumnType("nvarchar(450)");

                b.Property<string>("Value")
                    .HasColumnType("nvarchar(max)");

                b.HasKey("UserId", "LoginProvider", "Name");

                b.ToTable("AspNetUserTokens");
            });

            modelBuilder.Entity("GameShopStore.Core.Models.Address", b =>
            {
                b.HasOne("GameShopStore.Core.Models.User", "User")
                    .WithMany("Addresses")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("GameShopStore.Core.Models.CategorySubCategory", b =>
            {
                b.HasOne("GameShopStore.Core.Models.Category", "Category")
                    .WithMany("SubCategories")
                    .HasForeignKey("CategoryId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("GameShopStore.Core.Models.SubCategory", "SubCategory")
                    .WithMany("Categories")
                    .HasForeignKey("SubCategoryId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("GameShopStore.Core.Models.OrderStock", b =>
            {
                b.HasOne("GameShop.Domain.Model.Order", "Order")
                    .WithMany("OrderStocks")
                    .HasForeignKey("OrderId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("GameShopStore.Core.Models.Stock", "Stock")
                    .WithMany("OrderStocks")
                    .HasForeignKey("StockId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("GameShopStore.Core.Models.Photo", b =>
            {
                b.HasOne("GameShopStore.Core.Models.Product", "Product")
                    .WithMany("Photos")
                    .HasForeignKey("ProductId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("GameShopStore.Core.Models.Product", b =>
            {
                b.HasOne("GameShop.Domain.Model.Category", "Category")
                    .WithMany("Products")
                    .HasForeignKey("CategoryId");
            });

            modelBuilder.Entity("GameShopStore.Core.Models.ProductLanguage", b =>
            {
                b.HasOne("GameShopStore.Core.Models.Language", "Language")
                    .WithMany("Products")
                    .HasForeignKey("LanguageId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("GameShopStore.Core.Models.Product", "Product")
                    .WithMany("Languages")
                    .HasForeignKey("ProductId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("GameShopStore.Core.Models.ProductSubCategory", b =>
            {
                b.HasOne("GameShopStore.Core.Models.Product", "Product")
                    .WithMany("SubCategories")
                    .HasForeignKey("ProductId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("GameShopStore.Core.Models.SubCategory", "SubCategory")
                    .WithMany("Products")
                    .HasForeignKey("SubCategoryId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("GameShopStore.Core.Models.Requirements", b =>
            {
                b.HasOne("GameShopStore.Core.Models.Product", "Product")
                    .WithOne("Requirements")
                    .HasForeignKey("GameShopStore.Core.Models,Requirements", "ProductId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("GameShopStore.Core.Models.Stock", b =>
            {
                b.HasOne("GameShopStore.Core.Models.Product", "Product")
                    .WithOne("Stock")
                    .HasForeignKey("GameShopStore.Core.Models.Stock", "ProductId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("GameShopStore.Core.Models.StockOnHold", b =>
            {
                b.HasOne("GameShopStore.Core.Models.Stock", "Stock")
                    .WithMany()
                    .HasForeignKey("StockId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("GameShopStore.Core.Models.UserRole", b =>
            {
                b.HasOne("GameShopStore.Core.Models.Role", "Role")
                    .WithMany("UserRoles")
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("GameShopStore.Core.Models.User", "User")
                    .WithMany("UserRoles")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
            {
                b.HasOne("GameShopStore.Core.Models.Role", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
            {
                b.HasOne("GameShopStore.Core.Models.User", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
            {
                b.HasOne("GameShopStore.Core.Models.User", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
            {
                b.HasOne("GameShopStore.Core.Models.User", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });
#pragma warning restore 612, 618
        }
    }
}